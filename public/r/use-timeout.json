{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-timeout",
  "type": "registry:hook",
  "description": "A custom hook to manage timeouts.",
  "registryDependencies": [
    "https://reactusekit.dev/r/use-isomorphic-layout-effect.json"
  ],
  "files": [
    {
      "path": "src/registry/new-york/hooks/use-timeout.ts",
      "content": "import { useEffect, useRef } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"./use-isomorphic-layout-effect\";\n\n/**\n * A custom hook that sets up an timeout to call a callback function at specified intervals.\n * @param callback - The function to be called at each timeout.\n * @param delay - The time in milliseconds between each call. If null, the timeout is not set.\n */\n\nexport function useTimeout(callback: () => void, delay: number | null): void {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useIsomorphicLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === null || delay < 0) {\n      return;\n    }\n\n    const tick = () => savedCallback.current();\n    const id = setTimeout(tick, delay);\n\n    return () => clearTimeout(id);\n  }, [delay]);\n}\n",
      "type": "registry:hook"
    }
  ]
}